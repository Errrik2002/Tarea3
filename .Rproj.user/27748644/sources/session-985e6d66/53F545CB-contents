expresion <-read.csv("rawdata/expression_matrix (1).tsv",dec=",",sep="\t")
View(expresion)


colnames(expresion) <- namesbase

namesbase <- c("ID_REF", "WT1", 'WT2', "WT3", "KO1", "KO2", "KO3")


expresion1 <- t(expresion)

View(expresion1) ############

head(expresion)

#Carga los datos en la matriz #de expresión génica y asegúrate de que las condiciones
#A y B se correspondan con las columnas apropiadas. Es decir separa tu data.frame en dos correspondientes a cada condición.



WT <- subset(expresion, select= c("ID_REF", "WT1", "WT2", "WT3")) #hice dos subbases, unas de las 3 replicas de Wt y otro de las
#3 replicas de KO

WTT <- t(WT) #sacar la base transpuesta, mas que nada por comodidad 



KO <- subset(expresion, select= c("ID_REF","KO1", "KO2", "KO3")) #hacer la subbase

KOT <- t(KO)


WTT[1,3]
mean(as.numeric(WTT[-1,1]))

WTT[1,1]

length(colnames(WTT))


#####Calcula la media de expresión para cada gen en ambas condiciones.

####Usar la base transpuesta de cada condicion del KO y el WT
promexpre <- function(a){
x <- 1 #una funcion que use la base de datos ya sea WT o KO
for (i in 1:length(colnames(a))) {  #hacer un for para que haga el promedio de expresion de cada gen
  
  #y ya pasa sacar el del otro grupo unicamente en la funcon poner la otra base del experimental
  print(paste0(a[1,x] , " tiene un promedio de expresion de " , mean(as.numeric(a[-1,x]))))
  #nos da el gen y su promedio de expresion
  x <- x+1
  
}
}

promexpre(KOT)


####################
#Calcula el log2FC para cada gen como la diferencia en los logaritmos de la media de expresión de ambas
#condiciones.Utiliza un faunción definida por ti para realizar este cálculo.


# a = base de referencia o sea WT
# b = base de cambio o sea KO
# psicion del gen que quieres ver el cambio 


Log2FC <- function(a, b, c ){
  c <- as.numeric(c)
  
  
 wt <- mean(as.numeric(a[-1,c]))  
 print(paste0(a[1,c] , " tiene un promedio de expresion de " , wt , " es la referencia")) #se sacaba el valor de expresion especifico 
 #de ese gen, del numero del gen (c)
    
ko <- mean(as.numeric(b[-1,c]))
 print(paste0(b[1,c] , " tiene un promedio de expresion de " , ko , " es el cambio"))  #lo mismo con el de la condicion Ko
  

cambio <- ko/wt #se calcula el cambio

FC <- log2(cambio) #se hace el logaritmo

print(paste0("El Log Fold Change del gen ", a[1,c], " es de ", FC))


if(FC<1){
  print("La expresion disminuyo :c")
}

if(FC>1){
  print("La expresion aumento c:")
}
#nos imrpime el logfold change de un gen especifico y nos dice si la expresion aumento o disminuyo
#la desventaja es que seria ideal que fuera un for para todos los genes
}

Log2FC(WTT, KOT)
#

t.test(mean(as.numeric(WTT[,1])), mean(as.numeric(KOT[,1])))
#



x <- 1
mylistgene1 <- c()
for (i in 1:length(colnames(WTT))) {#se hace un t.test para sacar valor de P y si hay diferencias significativas
  
  pruebat <- t.test(as.numeric(WTT[-1,x]), as.numeric(KOT[-1,x])) #saca los valores del gen y los compara con los valores del mismo gen
  #pero en la otra condicion ya sea WT o KO
  valorP <- as.numeric(pruebat[3]) #me da el valor de P 
  
  x <- x+1
  print(i)
  mylistgene1[[i]] <- valorP #agregamos estos valores a una lista
}
mylistgene1[[994]] #podemos consultar el valor de P cuando queramos



#CICLO FOR 
x1 <- 1
mylistgene12 <- c()
for (i in 1:length(colnames(WTT))) {
  wt <- mean(as.numeric(WTT[-1,x1]))  
  
  
  ko <- mean(as.numeric(KOT[-1,x1]))
 
  
  cambio <- ko/wt
  
  FC1 <- log2(cambio)
  

  print(i)
  mylistgene12[[i]] <- FC1
  x1<-x1+1
}#hacemos algo similar, sacamos el LogFold change, pero con ciclo for para que lo saque de cada gen y nos lo gurde
#en una lista para poder consultarlo
mylistgene12[[4]]
  



#################
#Identifica los genes que están diferencialmente expresados mediante una prueba estadística adecuada.


expresdif <- function(a,b){
  x <- 1
  mylistgene1 <- c()
  for (i in 1:length(colnames(a))) {
    
    pruebat <- t.test(as.numeric(a[-1,x]), as.numeric(b[-1,x]))
    valorP <- as.numeric(pruebat[3]) #me da el valor de P

    if(valorP<0.05){
      print(paste0("el gen ", a[1,x] ," esta diferencialmente expreado respecto al control, con valor de P de ", valorP))
    }
    
    x <- x+1
    print(i)
    mylistgene1[[i]] <- valorP
  }
mylistgene1#nos hacia lo mismo que en la parte de arriba, solo que no nos guardaba nada en la lista
#es necesario salir del ambiente de funcion para poder guardar los resultados de un for en una lista
  
}


 expresdif(WTT, KOT) 

mylistgene1










################## Hacer la data frame

primeracol <- c()
primeracol <- as.numeric(mylistgene1[1])
primeracol #la lista de los valores de P y de Log fold change lo agregamos en un vector para poder 
#hacer una data frame despues y hacer la grafica
t<- 2
for (i in 1:length(colnames(WTT))){


primeracol <- append(primeracol, as.numeric(mylistgene1[t])) #########Esto fue para colocar el P valor en un concatenado

t <- t+1

}

primeracolLOG <- -log10(primeracol) #tenemos el valor de P pero lo cambiamos para poder verlo mejor en la grafica de volcano
primeracolLOG

###############




mylistgene14 <- as.numeric (unlist (mylistgene12))
segundacol <- c()
segundacol <- as.numeric(mylistgene14[1])
segundacol
f<- 2
for (i in 1:length(colnames(WTT))){
  
  
  segundacol <- append(segundacol, as.numeric(mylistgene14[f]))
  
  f <- f+1
  #hacemos lo mismo y extrarmos los valores de logfold change y generamos un vector
}


dim(segundacol)

IDref <- subset(WT, select = "ID_REF")
dim(IDref) #extraemos los identificadores
tail(volcaplot)
primeracolLOG


volcaplot <- data.frame(primeracolLOG, segundacol) #hacemos la daa frame con los vectores del valor de P y el LogFC 
volcaplot1 <- volcaplot[-22206,] #eliminamos un renglon para que tenga las mismas diemsniones que el concatenado de  los ID


IDrefvolcano <- cbind(volcaplot1, IDref) #agregamos la columna/vector de los ID de ref


volcaplot[,1] ####DA EL PVALOR ENTONCES [2] DA EL LOGFOLD CHANGE
volcaplot[,2]


plot(volcaplot1[,2],volcaplot1[,1], col= ifelse(volcaplot1$primeracolLOG>1.30 & volcaplot1$segundacol<0, "blue", ifelse(volcaplot1$primeracolLOG>1.30 & volcaplot1$segundacol>0, "red", "black")))

#hacemos el volvano plot con las condicionantes de valores, respecto a si los valores de logfold change y del p valor ser un color u otro para diferenciar
#los subexpresados (azul) de los sobreexpresados (rojo)

head(IDrefvolcano)
############################
#data_frame[which(data_frame$col1 %in% c("b","e") | data_frame$col2 > 4),]


##########Exporta los identificadores de los genes sub y sobre expresados.


subexpresados <- IDrefvolcano[which(IDrefvolcano$primeracolLOG >1.3),] #extraemos valores que tengan un valor de P significativo

head(subexpresados)

subexpresados1 <- subexpresados[which(subexpresados$segundacol<0),] #de la subabse de arriba ahora extraemos a los que tienen un logfold change menor a cero (disminuye)
subexpresados1 #########Estos son los subexpresados

cincogenesSUB <- sort(subexpresados1$primeracolLOG, decreasing = T)[1:5] #ordena los subexpresados respecto al mas significativo a menos y solo requerimos los primeros 5
#sacamos el valor de P mas alto 

cincogenesSUBID<-  subexpresados1 %>% filter_all(any_vars(. %in% c(cincogenesSUB[1:5]))) #en la base, buscamos el valor expecifico de el Pvalor que nos dio los primeros 5
#de uno en uno y vamos viendo el ID que corresponde a ese valor de P
cincogenesSUBID

#NA
#-
#Acad12
#Naip2
#Sos1
#estos son los genes que nos sale

#########SOBREEXPRESADOS

sobrexpresados <- IDrefvolcano[which(IDrefvolcano$primeracolLOG >1.3),]

sobrexpresados1 <- sobrexpresados[which(sobrexpresados$segundacol>0),]
sobrexpresados1
                                                                          #Repetimos pero ahora con los sobreexpresados

cincogenesSOBRE <- sort(sobrexpresados1$primeracolLOG, decreasing = T)[1:5]

cincogenesSOBREID<-  sobrexpresados1 %>% filter_all(any_vars(. %in% c(cincogenesSOBRE[1:5])))

cincogenesSOBREID


#Abhd17c
#Ddhd1,Mir5131
#Cdh24
#Rbm26,Gm17066 #estas son las proteinas
#Ggact


#La busqueda de los nombres d ela sproteinas se dio en excel al descargar la tabla de expresion con los ID y buscando el ID dabamos cn el 
#gen




#tenemos las imagenes de la red que creamos en STRING con las proteinas que nos dio al extraer los ID. Las imagenes en la carpeta images con nombre STRING...
#vemos que no se creo una red, por que estas proteinas no interactan entre ellas. tal vez sean proteina que en un red que pueda incluir mas nodos con un
#cambio significativo pueda integrarse e interactuar de alguna manera con un nodo intermediario, pero solo teniendo 5 nodos y una gran cantidad de proteinas
#puede que una interaccion completa de red pueda ser bajo


