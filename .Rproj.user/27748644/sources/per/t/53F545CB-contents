expresion <-read.csv("rawdata/expression_matrix (1).tsv",dec=",",sep="\t")
View(expresion)


colnames(expresion) <- namesbase

namesbase <- c("ID_REF", "WT1", 'WT2', "WT3", "KO1", "KO2", "KO3")


expresion1 <- t(expresion)

View(expresion1) ############esto ya esta bien, toda la pinche tarde para esto alv 

head(expresion)




WT <- subset(expresion, select= c("ID_REF", "WT1", "WT2", "WT3"))

WTT <- t(WT)



KO <- subset(expresion, select= c("ID_REF","KO1", "KO2", "KO3"))

KOT <- t(KO)


WTT[1,3]
mean(as.numeric(WTT[-1,1]))

WTT[1,1]

length(colnames(WTT))


#####Calcula la media de expresión para cada gen en ambas condiciones.

####Usar la base transpuesta de cada condicion del KO y el WT
promexpre <- function(a){
x <- 1
for (i in 1:length(colnames(a))) {
  
  
  
  print(paste0(a[1,x] , " tiene un promedio de expresion de " , mean(as.numeric(a[-1,x]))))
  
  x <- x+1
  
}
}

promexpre(KOT)


####################
#Calcula el log2FC para cada gen como la diferencia en los logaritmos de la media de expresión de ambas
#condiciones.Utiliza un faunción definida por ti para realizar este cálculo.


# a = base de referencia o sea WT
# b = base de cambio o sea KO
# psicion del gen que quieres ver el cambio 


Log2FC <- function(a, b, c ){
  c <- as.numeric(c)
  
  
 wt <- mean(as.numeric(a[-1,c]))  
 print(paste0(a[1,c] , " tiene un promedio de expresion de " , wt , " es la referencia"))
    
ko <- mean(as.numeric(b[-1,c]))
 print(paste0(b[1,c] , " tiene un promedio de expresion de " , ko , " es el cambio"))  
  

cambio <- ko/wt

FC <- log2(cambio)

print(paste0("El Log Fold Change del gen ", a[1,c], " es de ", FC))


if(FC<1){
  print("La expresion disminuyo :c")
}

if(FC>1){
  print("La expresion aumento c:")
}

}

Log2FC(WTT, KOT)
#

t.test(mean(as.numeric(WTT[,1])), mean(as.numeric(KOT[,1])))
#



x <- 1
mylistgene1 <- c()
for (i in 1:length(colnames(WTT))) {
  
  pruebat <- t.test(as.numeric(WTT[-1,x]), as.numeric(KOT[-1,x]))
  valorP <- as.numeric(pruebat[3]) #me da el valor de P
  
  x <- x+1
  print(i)
  mylistgene1[[i]] <- valorP
}
mylistgene1[[994]]



#CICLO FOR 
x1 <- 1
mylistgene12 <- c()
for (i in 1:length(colnames(WTT))) {
  wt <- mean(as.numeric(WTT[-1,x1]))  
  
  
  ko <- mean(as.numeric(KOT[-1,x1]))
 
  
  cambio <- ko/wt
  
  FC1 <- log2(cambio)
  

  print(i)
  mylistgene12[[i]] <- FC1
  x1<-x1+1
}
mylistgene12[[4]]
  



#################
#Identifica los genes que están diferencialmente expresados mediante una prueba estadística adecuada.


expresdif <- function(a,b){
  x <- 1
  mylistgene1 <- c()
  for (i in 1:length(colnames(a))) {
    
    pruebat <- t.test(as.numeric(a[-1,x]), as.numeric(b[-1,x]))
    valorP <- as.numeric(pruebat[3]) #me da el valor de P

    if(valorP<0.05){
      print(paste0("el gen ", a[1,x] ," esta diferencialmente expreado respecto al control, con valor de P de ", valorP))
    }
    
    x <- x+1
    print(i)
    mylistgene1[[i]] <- valorP
  }
mylistgene1
  
}


 expresdif(WTT, KOT)  ###########DUDAAAAAA

mylistgene1









#########

x <- 1
mylistgene1 <- c()
for (i in 1:length(colnames(WTT))) {
  
  pruebat <- t.test(as.numeric(WTT[-1,x]), as.numeric(KOT[-1,x]))
  valorP <- as.numeric(pruebat[3]) #me da el valor de P
  
  x <- x+1
  print(i)
  mylistgene1[[i]] <- valorP
}
mylistgene1[[994]]




################## Hacer la data frame

primeracol <- c()
primeracol <- as.numeric(mylistgene1[1])
primeracol
t<- 2
for (i in 1:length(colnames(WTT))){


primeracol <- append(primeracol, as.numeric(mylistgene1[t])) #########Esto fue para colocar el P valor en un concatenado

t <- t+1

}

primeracolLOG <- -log10(primeracol)
primeracolLOG
primeracol
###############




mylistgene14 <- as.numeric (unlist (mylistgene12))
segundacol <- c()
segundacol <- as.numeric(mylistgene14[1])
segundacol
f<- 2
for (i in 1:length(colnames(WTT))){
  
  
  segundacol <- append(segundacol, as.numeric(mylistgene14[f]))
  
  f <- f+1
  
}


dim(segundacol)

IDref <- subset(WT, select = "ID_REF")
dim(IDref)
tail(volcaplot)
primeracolLOG


volcaplot <- data.frame(primeracolLOG, segundacol)
volcaplot1 <- volcaplot[-22206,]


IDrefvolcano <- cbind(volcaplot1, IDref)


volcaplot[,1] ####DA EL PVALOR ENTONCES [2] DA EL LOGFOLD CHANGE
volcaplot[,2]


plot(volcaplot1[,2],volcaplot1[,1], col= ifelse(volcaplot1$primeracolLOG>1.30 & volcaplot1$segundacol<0, "blue", ifelse(volcaplot1$primeracolLOG>1.30 & volcaplot1$segundacol>0, "red", "black")))


head(IDrefvolcano)
############################
#data_frame[which(data_frame$col1 %in% c("b","e") | data_frame$col2 > 4),]

subexpresados <- IDrefvolcano[which(IDrefvolcano$primeracolLOG >1.3),]

head(subexpresados)

subexpresados1 <- subexpresados[which(subexpresados$segundacol<0),]
subexpresados1 #########Estos son los subexpresados

cincogenesSUB <- sort(subexpresados1$primeracolLOG, decreasing = T)[1:5]

cincogenesSUBID<-  subexpresados1 %>% filter_all(any_vars(. %in% c(cincogenesSUB[1:5])))

cincogenesSUBID

#NA
#-
#Acad12
#Naip2
#Sos1


#########SOBREEXPRESADOS

sobrexpresados <- IDrefvolcano[which(IDrefvolcano$primeracolLOG >1.3),]

sobrexpresados1 <- sobrexpresados[which(sobrexpresados$segundacol>0),]
sobrexpresados1


cincogenesSOBRE <- sort(sobrexpresados1$primeracolLOG, decreasing = T)[1:5]

cincogenesSOBREID<-  sobrexpresados1 %>% filter_all(any_vars(. %in% c(cincogenesSOBRE[1:5])))

cincogenesSOBREID


#Abhd17c
#Ddhd1,Mir5131
#Cdh24
#Rbm26,Gm17066
#Ggact



