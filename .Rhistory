print(elgen)
y <- y+1
mylistgene[[i]] <- elgen
}
for (i in 1:10) {
elgen <- script1 %>% filter_all(any_vars(. %in% (masexpre111[y])))
print(elgen)
y <- y+1
mylistgene[[i]] <- elgen
}
masexpre111
library(dplyr)
y <- 1
mylistgene <- c()
elgen <- script1 %>% filter_all(any_vars(. %in% (masexpre111[1])))
elgen
elgen <- script3 %>% filter_all(any_vars(. %in% (masexpre111[1])))
elgen
genesmasexpresados <- function(x){
pvalores11 <- x[,3]
masexpre111 <- sort(as.numeric(pvalores11), decreasing = F)[1:10]
library(dplyr)
y <- 1
mylistgene <- c()
for (i in 1:10) {
elgen <- x %>% filter_all(any_vars(. %in% c(masexpre111[y])))
print(elgen)
y <- y+1
mylistgene[[i]] <- elgen
}
mylistgene
print(paste0("la lista de genes se guardo en el objeto mylistgene, imprimelo para consultarlo las veces que quieras"))
}
genesmasexpresados(script1)
genesmasexpresados(script2)
genesmasexpresados(script3)
View(WTT)
expresion <-read.csv("rawdata/expression_matrix (1).tsv",dec=",",sep="\t")
colnames(expresion) <- namesbase
namesbase <- c("ID_REF", "WT1", 'WT2', "WT3", "KO1", "KO2", "KO3")
colnames(expresion) <- namesbase
expresion1 <- t(expresion)
WT <- subset(expresion, select= c("ID_REF", "WT1", "WT2", "WT3"))
WTT <- t(WT)
View(WTT)
KO <- subset(expresion, select= c("ID_REF","KO1", "KO2", "KO3"))
KOT <- t(KO)
t.test(as.numeric(WTT[-1,1]), as.numeric(KOT[-1,1]))
expresdif <- function(a,b){
x <- 1
for (i in 1:length(colnames(a))) {
pruebat <- t.test(as.numeric(a[-1,x]), as.numeric(b[-1,x]))
valorP <- as.numeric(pruebat[3]) #me da el valor de P
if(valorP<0.05){
print(paste0("el gen ", a[1,x] ," esta diferencialmente expreado respecto al control, con valor de P de ", valorP))
}
x <- x+1
}
}
expresdif(WTT, KOT)  ###########DUDAAAAAA
funcionexp <- expresdif(WTT, KOT)  ###########DUDAAAAAA
dim(funcionexp)
expresdif <- function(a,b){
x <- 1
for (i in 1:length(colnames(a))) {
pruebat <- t.test(as.numeric(a[-1,x]), as.numeric(b[-1,x]))
valorP <- as.numeric(pruebat[3]) #me da el valor de P
if(valorP<0.05){
print(paste0("el gen ", a[1,x] ," esta diferencialmente expreado respecto al control, con valor de P de ", valorP))
}
x <- x+1
print(i)
}
}
expresdif(WTT, KOT)  ###########DUDAAAAAA
t.test(mean(as.numeric(WTT[-1,1])), mean(as.numeric(KOT[-1,1])))
t.test(mean(as.numeric(WTT[-2:4,1])), mean(as.numeric(KOT[2:4,1])))
t.test(mean(as.numeric(WTT[2:4,1])), mean(as.numeric(KOT[2:4,1])))
expresdif <- function(a,b){
x <- 1
mylistgene1 <- c()
for (i in 1:length(colnames(a))) {
pruebat <- t.test(as.numeric(a[-1,x]), as.numeric(b[-1,x]))
valorP <- as.numeric(pruebat[3]) #me da el valor de P
if(valorP<0.05){
print(paste0("el gen ", a[1,x] ," esta diferencialmente expreado respecto al control, con valor de P de ", valorP))
}
x <- x+1
print(i)
mylistgene[[i]] <- valorP
}
mylistgene
}
expresdif(WTT, KOT)  ###########DUDAAAAAA
expresdif <- function(a,b){
x <- 1
mylistgene1 <- c()
for (i in 1:length(colnames(a))) {
pruebat <- t.test(as.numeric(a[-1,x]), as.numeric(b[-1,x]))
valorP <- as.numeric(pruebat[3]) #me da el valor de P
if(valorP<0.05){
print(paste0("el gen ", a[1,x] ," esta diferencialmente expreado respecto al control, con valor de P de ", valorP))
}
x <- x+1
print(i)
mylistgene1[[i]] <- valorP
}
mylistgene1
}
expresdif <- function(a,b){
x <- 1
mylistgene1 <- c()
for (i in 1:length(colnames(a))) {
pruebat <- t.test(as.numeric(a[-1,x]), as.numeric(b[-1,x]))
valorP <- as.numeric(pruebat[3]) #me da el valor de P
if(valorP<0.05){
print(paste0("el gen ", a[1,x] ," esta diferencialmente expreado respecto al control, con valor de P de ", valorP))
}
x <- x+1
print(i)
mylistgene1[[i]] <- valorP
}
mylistgene1
}
expresdif(WTT, KOT)  ###########DUDAAAAAA
mylistgene1
mylistgene1
x <- 1
mylistgene1 <- c()
x <- 1
mylistgene1 <- c()
for (i in 1:length(colnames(WTT))) {
pruebat <- t.test(as.numeric(WTT[-1,x]), as.numeric(KOT[-1,x]))
valorP <- as.numeric(pruebat[3]) #me da el valor de P
x <- x+1
print(i)
mylistgene1[[i]] <- valorP
}
mylistgene1
mylistgene1[[99]]
mylistgene1[[994]]
#CICLO FOR
x1 <- 1
mylistgene12 <- c()
for (i in 1:length(colnames(WTT))) {
wt <- mean(as.numeric(WTT[-1,x1]))
print(paste0(WTT[1,x1] , " tiene un promedio de expresion de " , wt , " es la referencia"))
ko <- mean(as.numeric(KOT[-1,x1]))
print(paste0(KOT[1,x1] , " tiene un promedio de expresion de " , ko , " es el cambio"))
cambio <- ko/wt
FC <- log2(cambio)
print(i)
mylistgene12[[i]] <- FC
}
mylistgene12
mylistgene12[[994]]
mylistgene12DF <- mylistgene12
mylistgene12DF <- as.data.frame(mylistgene12)
mylistgene12DF
View(mylistgene12DF)
dim(mylistgene1)
primeracol <- c()
primeracol <- mylistgene1[1]
primeracol
primeracol <- as.numeric(mylistgene1[1])
primeracol
primeracol <- as.numeric(mylistgene1[2])
primeracol
vec = c('java','python')
vec2 <- append(vec,'r')
print(vec2)
primeracol <- as.numeric(mylistgene1[1])
primeracol
primeracol <- append(primeracol, as.numeric(mylistgene1[3]))
primeracol
rm(primeracol)
primeracol <- c()
t<- 1
primeracol <- as.numeric(mylistgene1[1])
primeracol
for (i in 1:length(colnames(WTT))){
primeracol <- append(primeracol, as.numeric(mylistgene1[t]))
t <- t+1
}
dim(primeracol)
primeracol
segundacol <- c()
segundacol <- as.numeric(mylistgene12[1])
segundacol <- c()
segundacol <- as.numeric(mylistgene12[1])
segundacol
for (i in 1:length(colnames(WTT))){
segundacol <- append(segundacol, as.numeric(mylistgene12[f]))
f <- f+1
}
f<- 2
for (i in 1:length(colnames(WTT))){
segundacol <- append(segundacol, as.numeric(mylistgene12[f]))
f <- f+1
}
for (i in 1:length(colnames(WTT))){
segundacol <- append(segundacol, as.numeric(mylistgene12[f]))
f <- f+1
}
segundacol <- c()
segundacol <- as.numeric(mylistgene12[1])
segundacol
f<- 2
for (i in 1:length(colnames(WTT))){
segundacol <- append(segundacol, as.numeric(mylistgene12[f]))
f <- f+1
}
mylistgene13 <- as.matrix(mylistgene12)
segundacol <- c()
segundacol <- as.numeric(mylistgene13[1])
segundacol
f<- 2
for (i in 1:length(colnames(WTT))){
segundacol <- append(segundacol, as.numeric(mylistgene13[f]))
f <- f+1
}
for (i in 1:length(colnames(WTT))) {
wt <- mean(as.numeric(WTT[-1,x1]))
print(paste0(WTT[1,x1] , " tiene un promedio de expresion de " , wt , " es la referencia"))
ko <- mean(as.numeric(KOT[-1,x1]))
print(paste0(KOT[1,x1] , " tiene un promedio de expresion de " , ko , " es el cambio"))
cambio <- ko/wt
FC <- log2(cambio)
print(i)
mylistgene12[[i]] <- FC
}
mylistgene12[[]]
mylistgene12[[1:length(colnames(WTT))]]
mylistgene12[[1]]
segundacol <- c()
segundacol <- as.numeric(mylistgene13[1])
mylistgene13 <- as.data.frame(mylistgene12)
segundacol <- c()
segundacol <- as.numeric(mylistgene13[1])
segundacol
f<- 2
for (i in 1:length(colnames(WTT))){
segundacol <- append(segundacol, as.numeric(mylistgene13[f]))
f <- f+1
}
segundacol <- c()
segundacol <- as.numeric(mylistgene13[1])
segundacol
f<- 2
for (i in 1:length(colnames(WTT))){
segundacol <- append(segundacol, as.numeric(mylistgene13[f,]))
f <- f+1
}
mylistgene13 <- as.list(mylistgene12)
segundacol <- c()
segundacol <- as.numeric(mylistgene13[1])
segundacol
f<- 2
for (i in 1:length(colnames(WTT))){
segundacol <- append(segundacol, as.numeric(mylistgene13[f,]))
f <- f+1
}
for (i in 1:length(colnames(WTT))){
segundacol <- append(segundacol, as.numeric(mylistgene13[f]))
f <- f+1
}
mylistgene14 <- as.numeric (unlist (mylistgene12))
segundacol <- c()
segundacol <- as.numeric(mylistgene14[1])
segundacol
f<- 2
for (i in 1:length(colnames(WTT))){
segundacol <- append(segundacol, as.numeric(mylistgene14[f]))
f <- f+1
}
segundacol
volcaplot <- data.frame(primeracol, segundacol)
volcaplot
plot(volcaplot)
volcaplot[1]
plot(volcaplot[1],volcaplot[2])
volcaplot
plot(primeracol, segundacol)
vplo <- plot(primeracol, segundacol)
vplo
plot(primeracol, segundacol)
plot(volcaplot[1],volcaplot[2])
volcaplot[1] ####DA EL PVALOR ENTONCES [2] DA EL LOGFOLD CHANGE
plot(volcaplot[1],volcaplot[2])
plot(volcaplot[,1],volcaplot[,2])
volcaplot[,1] ####DA EL PVALOR ENTONCES [2] DA EL LOGFOLD CHANGE
volcaplot[,2]
plot(volcaplot[,1],volcaplot[,2])
segundacol
###############
mylistgene14 <- as.numeric (unlist (mylistgene12))
segundacol <- c()
segundacol <- as.numeric(mylistgene14[1])
segundacol
segundacol <- as.numeric(mylistgene14[2])
segundacol
mylistgene12
mylistgene12[[1]]
mylistgene12[[3]]
#CICLO FOR
x1 <- 1
mylistgene12 <- c()
for (i in 1:length(colnames(WTT))) {
wt <- mean(as.numeric(WTT[-1,x1]))
print(paste0(WTT[1,x1] , " tiene un promedio de expresion de " , wt , " es la referencia"))
ko <- mean(as.numeric(KOT[-1,x1]))
print(paste0(KOT[1,x1] , " tiene un promedio de expresion de " , ko , " es el cambio"))
cambio <- ko/wt
FC <- log2(cambio)
print(i)
mylistgene12[[i]] <- FC
}
mylistgene12[[4]]
#CICLO FOR
x1 <- 1
for (i in 1:length(colnames(WTT))) {
wt <- mean(as.numeric(WTT[-1,x1]))
ko <- mean(as.numeric(KOT[-1,x1]))
cambio <- ko/wt
FC1 <- log2(cambio)
print(i)
mylistgene12[[i]] <- FC1
}
mylistgene12[[4]]
mylistgene12[[1]]
if(FC>1){
print("La expresion aumento c:")
}
Log2FC <- function(a, b, c ){
c <- as.numeric(c)
wt <- mean(as.numeric(a[-1,c]))
print(paste0(a[1,c] , " tiene un promedio de expresion de " , wt , " es la referencia"))
ko <- mean(as.numeric(b[-1,c]))
print(paste0(b[1,c] , " tiene un promedio de expresion de " , ko , " es el cambio"))
cambio <- ko/wt
FC <- log2(cambio)
print(paste0("El Log Fold Change del gen ", a[1,c], " es de ", FC))
if(FC<1){
print("La expresion disminuyo :c")
}
if(FC>1){
print("La expresion aumento c:")
}
}
Log2FC(WTT, KOT, 47)
#CICLO FOR
x1 <- 1
mylistgene12 <- c()
#CICLO FOR
x1 <- 1
mylistgene12 <- c()
for (i in 1:length(colnames(WTT))) {
wt <- mean(as.numeric(WTT[-1,x1]))
ko <- mean(as.numeric(KOT[-1,x1]))
cambio <- ko/wt
FC1 <- log2(cambio)
print(i)
mylistgene12[[i]] <- FC1
x<- x=1
}
x<- x+1
for (i in 1:length(colnames(WTT))) {
wt <- mean(as.numeric(WTT[-1,x1]))
ko <- mean(as.numeric(KOT[-1,x1]))
cambio <- ko/wt
FC1 <- log2(cambio)
print(i)
mylistgene12[[i]] <- FC1
x<-x+1
}
mylistgene12[[1]]
mylistgene12[[4]]
#CICLO FOR
x1 <- 1
#CICLO FOR
x1 <- 1
mylistgene12 <- c()
for (i in 1:length(colnames(WTT))) {
wt <- mean(as.numeric(WTT[-1,x1]))
ko <- mean(as.numeric(KOT[-1,x1]))
cambio <- ko/wt
FC1 <- log2(cambio)
print(i)
mylistgene12[[i]] <- FC1
x1<-x1+1
}
mylistgene12[[4]]
mylistgene14 <- as.numeric (unlist (mylistgene12))
segundacol <- c()
segundacol <- as.numeric(mylistgene14[1])
segundacol
f<- 2
for (i in 1:length(colnames(WTT))){
segundacol <- append(segundacol, as.numeric(mylistgene14[f]))
f <- f+1
}
segundacol
volcaplot <- data.frame(primeracol, segundacol)
plot(volcaplot[,1],volcaplot[,2])
plot(volcaplot[,1],volcaplot[,2], col= ifelse(volcaplot[,1]<0.05&volcaplot[,2]<1,"blue", "black"))
plot(volcaplot[,2],volcaplot[,1], col= ifelse(volcaplot[,1]<0.05&volcaplot[,2]<1,"blue", "black"))
plot(volcaplot[,2],(log10( volcaplot[,1]), col= ifelse(volcaplot[,1]<0.05&volcaplot[,2]<1,"blue", "black"))
plot(volcaplot[,2],(log10( volcaplot[,1]) col= ifelse(volcaplot[,1]<0.05&volcaplot[,2]<1,"blue", "black"))
plot(volcaplot[,2],volcaplot[,1], col= ifelse(volcaplot[,1]<0.05&volcaplot[,2]<1,"blue", "black"))
segundacol
primeracol
primeracolLOG <- log10(primeracol)
primeracolLOG
primeracol
primeracolLOG
primeracolLOG <- -log10(primeracol)
primeracolLOG
volcaplot <- data.frame(primeracolLOG, segundacol)
plot(volcaplot[,2],volcaplot[,1], col= ifelse(volcaplot[,1]<0.05&volcaplot[,2]<1,"blue", "black"))
volcaplot[,1] ####DA EL PVALOR ENTONCES [2] DA EL LOGFOLD CHANGE
plot(volcaplot[,2],volcaplot[,1], col= ifelse(volcaplot[,1]<0.05&volcaplot[,2]>1,"blue", "black"))
plot(volcaplot[,2],volcaplot[,1], col= ifelse(volcaplot[,1]<0.05&volcaplot[,2]<1,"blue", "black"))
plot(volcaplot[,2],volcaplot[,1], col= ifelse(volcaplot[,1]<0.05, "blue", ifelse(volcaplot[,2]<1,"blue", "black"), "black", "black"))
plot(volcaplot[,2],volcaplot[,1], col= ifelse(volcaplot[,1]<0.05, "blue", ifelse(volcaplot[,2]<1,"blue", "black"), "black", "black"))
plot(volcaplot[,2],volcaplot[,1], col= ifelse(volcaplot[,1]<0.05, "blue", ifelse(volcaplot[,2]<1,"blue", "black"), "black"), "black")
log10(0.05)
-log10(0.05)
plot(volcaplot[,2],volcaplot[,1], col= ifelse(volcaplot$primeracolLOG>1.30 & volcaplot$segundacol<1, "blue", ifelse(volcaplot$primeracolLOG>1.30 & volcaplot$segundacol>1, "red", "black")), log = "x")
plot(volcaplot[,2],volcaplot[,1], col= ifelse(volcaplot$primeracolLOG>1.30 & volcaplot$segundacol<1, "blue", ifelse(volcaplot$primeracolLOG>1.30 & volcaplot$segundacol>1, "red", "black")))
volcaplot[volcaplot$primeracolLOG>1.30, volcaplot$segundacol<1]
volcaplot[>1.30,]
head(WTT)
names(WTT)
IDref <- subset(WT, select = "ID_REF")
IDref
volcaplot <- data.frame(primeracolLOG, segundacol,IDref )
dim(segundacol)
dim(IDref)
head(volcaplot)
tail(volcaplot)
volcaplot <- data.frame(primeracolLOG[-22206,], segundacol[-22206], IDref)
volcaplot <- data.frame(primeracolLOG[-22206,], segundacol, IDref)
volcaplot <- data.frame(primeracolLOG, segundacol)
volcaplot1 <- volcaplot[-22206,]
tail(volcaplot1)
IDrefvolcano <- cbind(volcaplot1, IDref)
IDrefvolcano
subexpre <- IDrefvolcano[(IDrefvolcano["primeracolLOG"]>1.3) | (IDrefvolcano["segundacol"]<1)]
subexpre
head(subexpre)
head(IDrefvolcano)
plot(volcaplot1[,2],volcaplot1[,1], col= ifelse(volcaplot1$primeracolLOG>0 & volcaplot1$segundacol<1, "blue", ifelse(volcaplot1$primeracolLOG>1.30 & volcaplot1$segundacol>1, "red", "black")))
plot(volcaplot1[,2],volcaplot1[,1], col= ifelse(volcaplot1$primeracolLOG>1.30 & volcaplot1$segundacol<0, "blue", ifelse(volcaplot1$primeracolLOG>1.30 & volcaplot1$segundacol>1, "red", "black")))
plot(volcaplot1[,2],volcaplot1[,1], col= ifelse(volcaplot1$primeracolLOG>1.30 & volcaplot1$segundacol<0, "blue", ifelse(volcaplot1$primeracolLOG>1.30 & volcaplot1$segundacol>0, "red", "black")))
volcaplot[,2]
plot(volcaplot1[,2],volcaplot1[,1], col= ifelse(volcaplot1$primeracolLOG>1.30 & volcaplot1$segundacol<-0, "blue", ifelse(volcaplot1$primeracolLOG>1.30 & volcaplot1$segundacol>0, "red", "black")))
plot(volcaplot1[,2],volcaplot1[,1], col= ifelse(volcaplot1$primeracolLOG>1.30 & volcaplot1$segundacol<0, "blue", ifelse(volcaplot1$primeracolLOG>1.30 & volcaplot1$segundacol>0, "red", "black")))
subexpresados <- subset(IDrefvolcano, select=IDrefvolcano$primeracolLOG>1.30 | select=IDrefvolcano$segundacol>0 | select =  "ID_ref" )
subexpresados <- subset(IDrefvolcano, primeracol >1.30 & segundacol <0)
subexpresados <- subset(IDrefvolcano, primeracol >1.30 | segundacol <0)
subexpresados <- subset(IDrefvolcano, primeracol >1.30 & segundacol <0)
subexpresados <- IDrefvolcano[which(IDrefvolcano$primeracolLOG > 1.3 | IDrefvolcano$segundacol <0),]
subexpresados
head(subexpresados)
subexpresados <- IDrefvolcano[which(IDrefvolcano$primeracolLOG >1.30 | IDrefvolcano$segundacol <0),]
head(subexpresados)
subexpresados <- IDrefvolcano[which(IDrefvolcano$primeracolLOG >1.3),]
head(subexpresados)
subexpresados1 <- subexpresados[which(subexpresados$segundacol<0),]
subexpresados1
sobrexpresados <- IDrefvolcano[which(IDrefvolcano$primeracolLOG >1.3),]
sobrexpresados <- IDrefvolcano[which(IDrefvolcano$primeracolLOG >1.3),]
sobrexpresados1 <- sobrexpresados[which(subexpresados$segundacol>0),]
sobrexpresados1
sort(sobrexpresados1)
sort(sobrexpresados1$segundacol)
sort(sobrexpresados1$primeracolLOG)
sort(sobrexpresados1$primeracolLOG, decreasing = T)
sort(subexpresados1$primeracolLOG, decreasing = T)
subexpresados111 <- sort(subexpresados1$primeracolLOG, decreasing = T)
subexpresados111[1]
sort(subexpresados1$primeracolLOG, decreasing = T)[1:5]
sort(sobrexpresados1$primeracolLOG, decreasing = T)[1:5]
cincogenesSUB <- sort(subexpresados1$primeracolLOG, decreasing = T)[1:5]
cincogenesSOBRE <- sort(sobrexpresados1$primeracolLOG, decreasing = T)[1:5]
sobrexpresados <- IDrefvolcano[which(IDrefvolcano$primeracolLOG >1.3),]
sobrexpresados1 <- sobrexpresados[which(sobrexpresados$segundacol>0),]
sobrexpresados1
cincogenesSOBRE <- sort(sobrexpresados1$primeracolLOG, decreasing = T)[1:5]
cincogenesSOBRE
cincogenesSUB
cincogenesSOBREID <- sobrexpresados1[which(sobrexpresados1$primeracolLOG== cincogenesSOBRE[1] | sobrexpresados1$primeracolLOG== cincogenesSOBRE[2] | sobrexpresados1$primeracolLOG== cincogenesSOBRE[3] | sobrexpresados1$primeracolLOG== cincogenesSOBRE[4] | sobrexpresados1$primeracolLOG== cincogenesSOBRE[5])]
cincogenesSOBREID <- sobrexpresados1[which(sobrexpresados1$primeracolLOG == cincogenesSOBRE[1])]
cincogenesSOBRE[1]
cincogenesSOBREID <- sobrexpresados1[which(sobrexpresados1$primeracolLOG == as.numeric(cincogenesSOBRE[1])]
cincogenesSOBREID <- sobrexpresados1[which(sobrexpresados1$primeracolLOG == as.numeric(cincogenesSOBRE[1]))]
cincogenesSOBREID <- sobrexpresados1[sobrexpresados1$primeracolLOG == cincogenesSOBRE[1]]
cincogenesSOBREID <- sobrexpresados1[sobrexpresados1$primeracolLOG == as.numeric(cincogenesSOBRE[1])]
cincogenesSOBRE[1]
cincogenesSOBREID <- sobrexpresados1[sobrexpresados1$primeracolLOG == 5.254602]
cincogenesSOBRE[2]
cincogenesSOBRE[3]
cincogenesSOBRE[4]
cincogenesSOBRE[5]
cincogenesSOBREID <- sobrexpresados1[sobrexpresados1$primeracolLOG == 5.254602 | sobrexpresados1$primeracolLOG ==5.112426 | sobrexpresados1$primeracolLOG ==  4.498257 | sobrexpresados1$primeracolLOG ==4.297249 | sobrexpresados1$primeracolLOG ==4.211855]
cincogenesSOBREID
View(cincogenesSOBREID)
cincogenesSOBREID<-  sobrexpresados1 %>% filter_all(any_vars(. %in% c(cincogenesSOBRE[1:5])))
cincogenesSOBREID
cincogenesSUB <- sort(subexpresados1$primeracolLOG, decreasing = T)[1:5]
cincogenesSUBID<-  subexpresados1 %>% filter_all(any_vars(. %in% c(cincogenesSUB[1:5])))
cincogenesSUBID
